<TreeSpice version 4.0>

node lv=0 id=1 art=1 nm=LuaFAR for Editor (version 2.9)
node lv=0 id=8 art=8 nm=User's utilities
node lv=1 id=36 art=36 nm=Installation functions
node lv=2 id=13 art=13 nm=AddToMenu
node lv=2 id=57 art=57 nm=AddCommand
node lv=2 id=20 art=20 nm=AddEvent
node lv=2 id=34 art=34 nm=AddUserFile
node lv=2 id=35 art=35 nm=AutoInstall
node lv=1 id=73 art=73 nm=Input data of installed scripts
node lv=1 id=37 art=37 nm=Packets of scripts
node lv=1 id=38 art=38 nm=Binary modules
node lv=1 id=14 art=14 nm=Example of use
node lv=0 id=59 art=59 nm=Command line and macro calls
node lv=1 id=78 art=78 nm=Another syntax
node lv=0 id=31 art=31 nm=Plugin API
node lv=1 id=32 art=32 nm=lf4ed.config
node lv=1 id=79 art=79 nm=lf4ed.reload
node lv=1 id=33 art=33 nm=lf4ed.version
node lv=0 id=21 art=21 nm=Lua Modules
node lv=1 id=80 art=80 nm=far2.settings
node lv=2 id=84 art=84 nm=deserialize
node lv=2 id=86 art=86 nm=field
node lv=2 id=83 art=83 nm=mdelete
node lv=2 id=81 art=81 nm=mload
node lv=2 id=82 art=82 nm=msave
node lv=2 id=85 art=85 nm=serialize

article id=1 dt=Text ctime=0 mtime=3859904262 nm=LuaFAR for Editor (version 2.9)
#_<markdown>
#_**LuaFAR for Editor** (a FAR plugin) is a collection of utilities
#_that implement various actions controlling the work of FAR's
#_Editor. The plugin also allows to add the unlimited number of new
#_utilities. Both the plugin and the utilities are written in Lua
#_programming language. 
#_
#_For description of the built-in utilities and the Configuration
#_Dialog, see the plugin's help file.
#_
#_- [User's utilities](8.html)
#_- [Command line](59.html)
#_- [Plugin API](31.html)
#_- [Lua Modules](21.html)
#_

article id=8 dt=Text ctime=0 mtime=0 nm=User's utilities
#_<markdown>
#_
#_### Installing user's utilities
#_
#_Installing user's utilities can be done via the file **_usermenu.lua**
#_lying in the plugin's directory. This file is run in two cases:
#_
#_- When FAR calls `SetStartupInfo` of the plugin
#_- When the command "Reload User File" from the Configuration Menu
#_  is executed
#_
#_There are a few [installation functions](36.html) that are
#_intended to be called from **_usermenu.lua**.
#_
#_### Running user's utilities
#_
#_User utilities can be run in the following ways:
#_
#_- Via a menu item; see [`AddToMenu`](13.html).
#_- Via a shortcut (from Editor only), see [`AddToMenu`](13.html).
#_- From the [command line](59.html) (the plugin registers a command
#_  line prefix **`lfe`**); see [`AddCommand`](57.html).
#_
#_### Running scripts without installation
#_
#_- From the Editor: use the included utility *Lua Script*.
#_- From the [command line](59.html).
#_
#_### Links
#_
#_[Installation functions](36.html)<br>
#_[Packets of scripts](37.html)<br>
#_[Binary modules](38.html)<br>
#_[Example of use](14.html)<br>
#_
#_
#_

article id=13 dt=Text ctime=0 mtime=3860309876 nm=AddToMenu
#_<markdown>
#_**`AddToMenu (where, text, hotkey, handler)`**
#_
#_### Description
#_
#_Function `AddToMenu` is available to the *_usermenu.lua* script.<br>
#_It allows to add a specified utility to the plugin's menu and
#_assign it a hot key.
#_
#_### Parameters
#_
#_1. `where`<br>
#_Where the utility is intended to run from: any combination
#_of letters **[cdepv]** (**c**=configuration menu, **d**=dialog, **e**=editor, **p**=panels, **v**=viewer).
#_
#_1. `text`<br>
#_Text that should appear in the menu.<br>
#_-- To assign a hot key without adding a menu item, supply a `nil`.<br>
#_-- To add a separator, specify a string beginning with `":sep:"`
#_   following by optional text, e.g. `":sep:Block commands"`.<br>
#_-- If the [utility for localization](68.html) is used, and `text`
#_   begins with `"::"`, then the rest of the text is treated as a
#_   message identifier. (In the case of separator, prefix `":sep:::"`
#_   can be used).
#_
#_1. `hotkey`<br>
#_A key combination for calling the utility, e.g. `"Alt+Shift+F4"`.<br>
#_Supply `nil` if no hot key is needed.<br>
#_**NOTE:** a hot key assigned this way works **only from Editor**,
#_provided that no macro is assigned to that key.
#_
#_1. `handler`<br>
#_  -- either a Lua function, or<br>
#_  -- the number of a built-in utility (1 to 6).
#_
#_### Examples
#_
#_      AddToMenu ("e", "Count words", nil, count_words)
#_      AddToMenu ("e", "Search", "Ctrl+F", search)
#_      AddToMenu ("p", "Rename Files", nil, rename)
#_      AddToMenu ("evp", "Calendar", "Alt+F12", calendar)
#_
#_To assign a hot key to a built-in utility, supply `text` as `nil`
#_and specify the number of the built-in utility via `handler`:
#_      AddToMenu ("e", nil, "Ctrl+1", 1)
#_

article id=14 dt=Text ctime=0 mtime=3853967770 nm=Example of use
#_<markdown>
#_### _usermenu.lua
#_    local function SmartHome()
#_      local info, str = editor.GetInfo(), editor.GetString()
#_      local pos = str.StringText:find("%S") or 1
#_      editor.SetPosition(nil, pos==info.CurPos and 1 or pos)
#_      editor.Redraw()
#_    end
#_    AddToMenu("e", nil, "Home", SmartHome)
#_
#_    AddUserFile("scripts/fl_scripts/_usermenu.lua")
#_    AddUserFile("scripts/Rh_Scripts/_testmenu.lua")
#_    AddUserFile("handlers.lua")
#_
#_### handlers.lua
#_    local F = far.Flags
#_
#_    local function ReplaceChar (Rec)
#_      if (Rec.EventType == F.FARMACRO_KEY_EVENT) or
#_         (Rec.EventType == F.KEY_EVENT and Rec.KeyDown)
#_      then
#_        if Rec.UnicodeChar == "t" then
#_          editor.InsertText("X")
#_          editor.Redraw()
#_          return true
#_        end
#_      end
#_    end
#_
#_    local function ShowTemplatesMenu (Event, Param)
#_      if Event == F.EE_READ then
#_        require 'fl_scripts/editor/template'
#_        templates_menu()
#_      end
#_    end
#_
#_    AddEvent("EditorInput", ReplaceChar)
#_    AddEvent("EditorEvent", ShowTemplatesMenu)

article id=20 dt=Text ctime=0 mtime=3860309886 nm=AddEvent
#_<markdown>
#_**`AddEvent (event_name, handler)`**
#_
#_### Description
#_
#_Function `AddEvent` is available to the *_usermenu.lua* script.<br>
#_It allows to add a function handler that will be further called on some FAR event.
#_
#_`event_name` can be one of the following strings:
#_
#_* `"EditorInput"`
#_* `"EditorEvent"`
#_* `"ViewerEvent"`
#_* `"DialogEvent"`
#_* `"ExitScript"`
#_
#_### Notes about the handlers
#_
#_1. There can be multiple handlers for the same event type. They will
#_   be called in the order their files are specified in
#_   `_usermenu.lua`.
#_1. The handlers' input parameters correspond to the *exported
#_   functions* with the same names, e.g. `ViewerEvent`
#_   corresponds to `export.ProcessViewerEvent`, etc. (see LuaFAR manual
#_   for details). `ExitScript` has no parameters, no return value.
#_1. If the return value of a handler's `EditorInput` is true,
#_   the rest of `EditorInput` handlers are not called, and
#_   true is returned to Far. This is the same also for `DialogEvent`.
#_1. The return values of `EditorEvent` and `ViewerEvent` handlers
#_   are ignored.
#_1. `EditorInput` handlers are not called when a user-defined
#_   hot key is pressed.
#_1. `ExitScript` is called when the plugin is about to be unloaded.
#_   It is also called before the "Reload User file" operation.
#_

article id=21 dt=Text ctime=0 mtime=3854644115 nm=Lua Modules
#_<markdown>
#_There are a few Lua modules that can be used in the utilities added by the user:
#_
#_* [`far2.settings`](80.html)
#_

article id=31 dt=Text ctime=0 mtime=3852182734 nm=Plugin API
#_<markdown>
#_
#_1. There is an important thing to know when writing scripts for
#_   *LuaFAR for Editor*: indexing string variables accesses functions
#_   in **`utf8`** rather than in **`string`** namespace.
#_     * For example, `s:sub(1,2)` means `utf8.sub(s,1,2)`.
#_     * To use `string` library, specify that explicitly,
#_       e.g., `string.sub(s,1,2)`.
#_     * **`#s`** refers to `string.len(s)`. Use **`s:len()`**
#_       to obtain number of characters.
#_1. The plugin has a few functions that are available to user scripts.
#_   They are placed under **lf4ed** namespace.
#_     * [`lf4ed.config`](32.html)
#_     * [`lf4ed.reload`](79.html)
#_     * [`lf4ed.version`](33.html)
#_

article id=32 dt=Text ctime=0 mtime=3859383744 nm=lf4ed.config
#_Get the plugin configuration.
#_
#_cfg = lf4ed.config()
#_
#_**Returns:**
#_  *cfg*: table
#_         Fields of *cfg*:
#_           ReloadDefaultScript : boolean
#_           RequireWithReload   : boolean
#_           ReturnToMainMenu    : boolean
#_
#_**Description:**
#_  The function returns a copy of the plugin's configuration table.
#_

article id=33 dt=Text ctime=0 mtime=0 nm=lf4ed.version
#_Get plugin version.
#_
#_version = lf4ed.version()
#_
#_**Parameters:**
#_  none
#_
#_**Returns:**
#_  *version*: string, e.g. "0.8.0"
#_
#_

article id=34 dt=Text ctime=0 mtime=3860305827 nm=AddUserFile
#_<markdown>
#_**`AddUserFile (filename)`**
#_
#_### Description
#_
#_Function `AddUserFile` is available to the *_usermenu.lua* script.
#_
#_This function executes the script `filename` passing `filename` as the argument.
#_The script can set some top-level variable to this value so that script's
#_functions could use it.
#_
#_### Parameters
#_
#_1. `filename`<br>
#_Specifies a file that is treated as an additional *_usermenu.lua* file.
#_Either an absolute path or a path relative to the plugin's directory can be specified.
#_
#_### Notes
#_
#_If the file's extension is `.moon` then it is treated as a MoonScript file,
#_otherwise as a Lua file.
#_
#_All utilities added by [`AddToMenu`](13.html) and
#_[`AddCommand`](57.html) calls within the file specified by `filename`
#_share a common environment that does not change until the next
#_*Reload User File* operation (or until FAR termination).
#_
#_In fact, the plugin itself executes `AddUserFile("_usermenu.lua")`.
#_
#_

article id=35 dt=Text ctime=0 mtime=3860306007 nm=AutoInstall
#_<markdown>
#_**`AutoInstall (startpath)`**
#_
#_### Description
#_
#_Function `AutoInstall` is available to the *_usermenu.lua* script.<br>
#_It looks for Lua and MoonScript files in `startpath` and its
#_subdirectories recursively,
#_and calls [`AddUserFile`](34.html) for each matching file found.
#_
#_### Parameters
#_
#_1. `startpath`<br>
#_Either an absolute path or a path relative to the plugin's directory
#_
#_### Notes
#_- During the recursive search the directories whose names begin with `_`
#_  (underscore) are skipped with all their content
#_- Lua files are determined by the extension `.lua`
#_- MoonScript files are determined by the extension `.moon`
#_- Files whose name begin with `_` (underscore) are skipped
#_
#_### Examples
#_
#_      AutoInstall ("scripts")
#_

article id=36 dt=Text ctime=0 mtime=3852664569 nm=Installation functions
#_<markdown>
#_
#_[`AddToMenu`](13.html)<br>
#_[`AddCommand`](57.html)<br>
#_[`AddEvent`](20.html)<br>
#_[`AddUserFile`](34.html)<br>
#_[`AutoInstall`](35.html)<br>
#_

article id=37 dt=Text ctime=0 mtime=0 nm=Packets of scripts
#_<markdown>
#_If there is a set of utilities that is distributed as a single
#_unit ("packet of scripts"), it makes sense to install it separately
#_from other scripts.
#_
#_* The standard location for adding packets of scripts is
#_**`<plugin_path>/scripts`**.
#_It is recommended to install the packet in subdirectory
#_**`<plugin_path>/scripts/<packet_name>`**.
#_
#_* The plugin modifies `package.path` by adding at the beginning:
#_**`<plugin_path>/scripts/?.lua;`**. (So the user doesn't have to.)
#_
#_* Due to the danger of module names collision, it is **not** recommended
#_for packet writers to further modify `package.path`. Instead, start
#_the argument of every `require` call with `<packet_name>`.
#_E.g., if the packet is named *fl_scripts* then do:
#_`require 'fl_scripts/utils/read_config'`

article id=38 dt=Text ctime=0 mtime=0 nm=Binary modules
#_<markdown>
#_
#_Sometimes, user scripts may need some binary module (e.g.,
#_*LuaFileSystem*) for its functioning. There are two ways
#_of installing the binary modules:
#_
#_* If there is no specific setup for changing `package.cpath`
#_  (usually via the environment variable `LUA_CPATH`), then
#_  put the binary modules into `%FARHOME%` directory.
#_
#_* Otherwise, put the binary modules into any directory listed
#_  in `package.cpath`.
#_
#_

article id=57 dt=Text ctime=0 mtime=3860309881 nm=AddCommand
#_<markdown>
#_**`AddCommand (command, handler [, description])`**
#_
#_### Description
#_
#_Function `AddCommand` is available to the *_usermenu.lua* script.<br>
#_It establishes a correspondence between the given `command` and
#_the specified action (`handler`). This allows to run that action
#_either from the command line or from a macro.
#_
#_### Parameters
#_
#_1. `command`<br>
#_The first command line parameter after the plugin's prefix.
#_
#_1. `handler`<br>
#_A Lua function.
#_
#_1. `description`<br>
#_Description of the command (a string)
#_
#_### Note
#_
#_`AddCommand` may be called several times with the same `command` parameter
#_but different `handler` and `description` parameters. When such a comnmand
#_is later invoked the user is presented with a menu for choosing the desired
#_action.
#_
#_### Examples
#_      AddCommand("calc", calc, "Calculator")
#_      AddCommand("hello", function() far.Message("Hello") end, "Hello")
#_

article id=59 dt=Text ctime=0 mtime=3862201278 nm=Command line and macro calls
#_<markdown>
#_
#_###Syntax
#_      lfe: [<options>] <command>|-r<filename> [<arguments>]
#_
#_####Options
#_      -a          asynchronous execution
#_      -e <str>    execute string <str>
#_      -l <lib>    load library <lib>
#_
#_####Command
#_Any command added via [`AddCommand`](57.html) function in
#_*_usermenu.lua*.
#_
#_####Filename
#_Name of a Lua script file. It can be either absolute, or relative
#_to the current directory.
#_
#_####Example of command line call
#_      lfe: calc 2+2
#_
#_####Example of macro call
#_      Plugin.Call(0x6F332978, "-a calc 2+2")
#_

article id=73 dt=Text ctime=3491725586 mtime=3859823590 nm=Input data of installed scripts
#_<markdown>
#_
#_### Scripts installed via `AddToMenu` call (run from plugin menu or shortcut)
#_
#_* The invoked function receives no arguments.
#_
#_### Scripts installed via `AddCommand` call (run via plugin command)
#_
#_* The invoked function receives all the arguments (if any) specified after the command name.
#_
#_*Example:*
#_      local function fShow(...) far.Show(...) end
#_      AddCommand("Show", fShow)
#_      ...
#_      lfe: Show 45 67 foo bar

article id=78 dt=Text ctime=3851458231 mtime=3857977179 nm=Another syntax
#_<markdown>
#_
#_###Syntax
#_      lfe: = <expression_list>
#_
#_This syntax allows to display an expression list, e.g.
#_      lfe: = 5, 6+44, "apple"
#_is equivalent to
#_      far.Show(5, 6+44, "apple")
#_

article id=79 dt=Text ctime=3851704547 mtime=3851705152 nm=lf4ed.reload
#_Reload user file.
#_
#_lf4ed.reload()
#_
#_**Parameters:**
#_  none
#_
#_**Returns:**
#_  nothing
#_
#_This function reloads file _usermenu.lua.
#_This is the same as running "Reload User File" from the plugin's
#_configuration menu.
#_

article id=80 dt=Text ctime=3854196003 mtime=3854197259 nm=far2.settings
#_This library provides functions for storing and retrieving
#_persistent data (persistent between FAR sessions).

article id=81 dt=Text ctime=3854196131 mtime=3854196688 nm=mload
#_value, errmsg = sett.mload (key, name)
#_
#_**Parameters:**
#_  key:       string
#_  name:      string
#_
#_**Returns:**
#_  value:     number, string, boolean, table, or nil.
#_  errmsg:    nil on success, string on failure.
#_
#_**Description:**
#_  Function *mload* reads a value from the database.
#_  If the second return value is nil then the first return value is valid.
#_

article id=82 dt=Text ctime=3854196137 mtime=3854196695 nm=msave
#_ret = sett.msave (key, name, value)
#_
#_**Parameters:**
#_  key:       string
#_  name:      string
#_  value:     nil, boolean, number, string, table
#_
#_**Returns:**
#_  ret:       boolean
#_
#_**Description:**
#_  Function *msave* saves the specified value into the database.
#_
#_  When you save a table the following will be preserved:
#_     keys of types:    number, string, boolean, table.
#_     values of types:  number, string, boolean, table.
#_
#_  Nested tables and recursive references are correctly processed.
#_
#_  The link between a table and its metatable is preserved.
#_

article id=83 dt=Text ctime=3854196145 mtime=3854197373 nm=mdelete
#_ret = sett.mdelete (key, name)
#_
#_**Parameters:**
#_  key:       string
#_  name:      string
#_
#_**Returns:**
#_  ret:       boolean
#_
#_**Description:**
#_  Function *mdelete* deletes a value from the database.
#_

article id=84 dt=Text ctime=3854196154 mtime=3854196918 nm=deserialize
#_value, errmsg = sett.deserialize (str)
#_
#_**Parameters:**
#_  str:       string
#_
#_**Returns:**
#_  value:     number, string, boolean, table, or nil.
#_  errmsg:    nil on success, string on failure.
#_
#_**Description:**
#_  Function *deserialize* recreates a copy of a previously serialized value.
#_  If the second return value is nil then the first return value is valid.
#_
#_**See also:**
#_  `serialize`
#_
#_@@@
#_<lua> Links = {
#_  serialize="85.html"
#_} </lua>
#_

article id=85 dt=Text ctime=3854196167 mtime=3854196934 nm=serialize
#_ret = sett.serialize (value)
#_
#_**Parameters:**
#_  value:     nil, boolean, number, string, table
#_
#_**Returns:**
#_  ret:       string
#_
#_**Description:**
#_  Function *serialize* converts the passed value into a string.
#_
#_  When you serialize a table the following will be preserved:
#_     keys of types:    number, string, boolean, table.
#_     values of types:  number, string, boolean, table.
#_
#_  Nested tables and recursive references are correctly processed.
#_
#_  The link between a table and its metatable is preserved.
#_
#_**See also:**
#_  `deserialize`
#_
#_@@@
#_<lua> Links = {
#_  deserialize="84.html"
#_} </lua>
#_

article id=86 dt=Text ctime=3854197468 mtime=3854199354 nm=field
#_ret = sett.field (tbl, ...)
#_
#_**Parameters:**
#_  tbl :    table
#_  ... :    one or more strings
#_
#_**Returns:**
#_  ret:     table
#_
#_**Description:**
#_  This function tries to get a field from the table *tbl*.
#_  If the field does not exist the function creates a new table
#_  and assigns it to the field of the nearest enclosing table.
#_  Multiple input strings are nested field names.
#_
#_**Example**
#_  local tbl = {}
#_  ret = sett.field(tbl, "foo", "bar")
#_
#_  After the call *tbl* will look as { foo = { bar={} } }
#_  The function will return tbl["foo"]["bar"]
#_

